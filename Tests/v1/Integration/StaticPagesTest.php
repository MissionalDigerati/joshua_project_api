<?php
declare(strict_types=1);

/**
 * This file is part of Joshua Project API.
 *
 * Joshua Project API is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Joshua Project API is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see
 * <http://www.gnu.org/licenses/>.
 *
 * @author Johnathan Pulos <johnathan@missionaldigerati.org>
 * @license http://opensource.org/licenses/gpl-license.php GNU Public License
 *
 */
namespace Tests\v1\Integration;

use PHPToolbox\CachedRequest\CachedRequest;
use PHPToolbox\PDODatabase\PDODatabaseConnect;
use PHPUnit\Framework\TestCase;

/**
 * The class for testing integration of the Static Pages
 *
 * @package default
 * @author Johnathan Pulos
 */
class StaticPagesTest extends TestCase
{
    /**
     * The CachedRequest Object
     *
     * @var CachedRequest
     */
    public $cachedRequest;
    /**
     * The PDO database connection object
     *
     * @var PDODatabaseConnect
     */
    private $db;
    /**
     * The current API version number
     *
     * @var string
     * @access private
     **/
    private $APIVersion;
    /**
     * The URL for the testing server
     *
     * @var string
     * @access private
     **/
    private $siteURL;

    /**
     * Set up the test class
     *
     * @return void
     * @access public
     * @author Johnathan Pulos
     */
    public function setUp(): void
    {
        $this->APIVersion = $_ENV['api_version'];
        $this->siteURL = $_ENV['site_url'];
        $this->cachedRequest = new CachedRequest();
        $this->cachedRequest->cacheDirectory =
            __DIR__ .
            DIRECTORY_SEPARATOR . ".." .
            DIRECTORY_SEPARATOR . ".." .
            DIRECTORY_SEPARATOR . "Support" .
            DIRECTORY_SEPARATOR . "cache" .
            DIRECTORY_SEPARATOR;
        $this->db = getDatabaseInstance();
    }
    /**
     * Runs at the end of each test
     *
     * @access public
     * @author Johnathan Pulos
     */
    public function tearDown(): void
    {
        $this->cachedRequest->clearCache();
        /**
         * Clear all the api_keys generated by the test
         *
         * @author Johnathan Pulos
         */
        $this->db->query("DELETE FROM `md_api_keys` WHERE `api_usage` = 'testing'");
    }
    /**
     * Users should be able to access the Home Page
     *
     * @return void
     * @author Johnathan Pulos
     */
    public function testWebsiteShouldDisplayTheHomePage(): void
    {
        $response = $this->cachedRequest->get(
            $this->siteURL . "/",
            array(),
            "show_home"
        );
        $this->assertEquals(200, $this->cachedRequest->responseCode);
    }
    /**
     * Users should be able to access the Terms of Use Page
     *
     * @return void
     * @author Johnathan Pulos
     */
    public function testWebsiteShouldDisplayTheTermsOfUsePage(): void
    {
        $response = $this->cachedRequest->get(
            $this->siteURL . "/terms_of_use",
            array(),
            "show_terms_of_use"
        );
        $this->assertEquals(200, $this->cachedRequest->responseCode);
        $this->assertStringContainsString('<h2>API Terms of Use</h2>', $response);
    }
    /**
     * Users should be able to get their API Key
     *
     * @return void
     * @author Johnathan Pulos
     */
    public function testWebsiteShouldAllowUsersToGetAnAPIKeyIfValidAuthorizationKey(): void
    {
        $authorizationToken = 'l543g3$4';
        $expectedAPIKey = generateRandomKey(12);
        $this->db->query(
            "INSERT INTO md_api_keys (api_usage, api_key, authorize_token, status, created) VALUES ('testing', '" .
            $expectedAPIKey . "', '" . $authorizationToken . "', 0, NOW())"
        );
        $response = $this->cachedRequest->get(
            $this->siteURL . "/get_my_api_key",
            ['authorize_token' => $authorizationToken],
            "get_my_api_key"
        );
        deleteApiKey($expectedAPIKey);
        $this->assertEquals(200, $this->cachedRequest->responseCode);
        $this->assertNotEquals(false, strpos(strtolower($response), 'api key has been activated'));
    }
    /**
     * Users should see warning if API Key is already active
     *
     * @return void
     * @author Johnathan Pulos
     */
    public function testWebsiteShouldTellUsersThatAPIKeyAlreadyUpdated(): void
    {
        $authorizationToken = 'l543g3$4Ac';
        $expectedAPIKey = generateRandomKey(12);
        $this->db->query(
            "INSERT INTO md_api_keys (api_usage, api_key, authorize_token, resource_used, status, created)" .
            " VALUES ('testing', '" . $expectedAPIKey . "', '" . $authorizationToken . "', 'testing', 1, NOW())"
        );
        $response = $this->cachedRequest->get(
            $this->siteURL . "/get_my_api_key",
            array('authorize_token' => $authorizationToken),
            "get_my_api_key_active_key"
        );
        deleteApiKey($expectedAPIKey);
        $this->assertEquals(200, $this->cachedRequest->responseCode);
        $this->assertNotEquals(false, strpos(strtolower($response), 'api key was already activated'));
    }
    /**
     * Users should see warning if API Key has been suspended
     *
     * @return void
     * @author Johnathan Pulos
     */
    public function testWebsiteShouldTellUsersThatAPIKeyIsSuspended(): void
    {
        $authorizationToken = 'l543g3$4Ac';
        $expectedAPIKey = generateRandomKey(12);
        $this->db->query(
            "INSERT INTO md_api_keys (api_usage, api_key, authorize_token, resource_used, status, created) " .
            "VALUES ('testing', '" . $expectedAPIKey . "', '" . $authorizationToken . "', 'testing', 2, NOW())"
        );
        $response = $this->cachedRequest->get(
            $this->siteURL . "/get_my_api_key",
            array('authorize_token' => $authorizationToken),
            "get_my_api_key_suspended_key"
        );
        deleteApiKey($expectedAPIKey);
        $this->assertEquals(200, $this->cachedRequest->responseCode);
        $this->assertNotEquals(false, strpos(strtolower($response), 'api key was suspended'));
    }
    /**
     * Users should see error if the Authorization Token is Missing
     *
     * @return void
     * @author Johnathan Pulos
     */
    public function testWebsiteShouldWarnUsersWhenTheAuthorizationTokenIsMissing(): void
    {
        $authorizationToken = 'l543g3$4Ac';
        $expectedAPIKey = 'AKey$43Ac';
        $this->db->query(
            "INSERT INTO md_api_keys (api_usage, api_key, authorize_token, resource_used, status, created) " .
            "VALUES ('testing', '" . $expectedAPIKey . "', '" . $authorizationToken . "', 'testing', 2, NOW())"
        );
        $response = $this->cachedRequest->get(
            $this->siteURL . "/get_my_api_key",
            array('authorize_token' => ''),
            "get_my_api_key_missing_token"
        );
        deleteApiKey($expectedAPIKey);
        $this->assertEquals(200, $this->cachedRequest->responseCode);
        $this->assertNotEquals(false, strpos(strtolower($response), 'unable to locate your api key'));
    }
    /**
     * Users should be able to access the Resend Activation URLS page
     *
     * @return void
     * @author Johnathan Pulos
     */
    public function testWebsiteShouldDisplayTheResendActivationLinkPage(): void
    {
        $response = $this->cachedRequest->get(
            $this->siteURL . "/resend_activation_links",
            array(),
            "show_resend_activation_links"
        );
        $this->assertEquals(200, $this->cachedRequest->responseCode);
    }
}
