<?php
/**
 * This file is part of Joshua Project API.
 * 
 * Joshua Project API is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Joshua Project API is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see 
 * <http://www.gnu.org/licenses/>.
 *
 * @author Johnathan Pulos <johnathan@missionaldigerati.org>
 * @copyright Copyright 2013 Missional Digerati
 * 
 */
namespace QueryGenerators;

/**
 * The parent class for all Query Generators.  This class holds common functionality between all Query Generators.
 *
 * @package default
 * @author Johnathan Pulos
 */
class QueryGenerator
{
    /**
     * The prepared statement generated by the class to be used with PDO
     *
     * @var string
     * @access public
     */
    public $preparedStatement = "";
    /**
     * The variables for the prepared statement
     *
     * @var array
      * @access public
     */
    public $preparedVariables = array();
    /**
     * The Sanitizer class for sanitizing data
     *
     * @var object
     * @access protected
     */
    protected $sanitizer;
    /**
     * The Validator class for checking validations
     *
     * @var object
     * @access protected
     */
    protected $validator;
    /**
     * The provided parameters passed in from the $_GET params
     *
     * @var array
      * @access protected
     */
    protected $providedParams = array();
    /**
     * An array of column names for this database table that we want to select in searches.  Simply remove fields you do not want to expose.
     *
     * @var array
     * @access protected
     */
    protected $fieldsToSelectArray = array();
    /**
     * A string that will hold the fields for the Select statement
     *
     * @var string
     * @access protected
     */
    protected $selectFieldsStatement = '';
    /**
     * The table to pull the data from
     *
     * @var string
     * @access protected
     */
    protected $tableName = '';
    /**
     * A string that will hold the default order by for the Select statement
     *
     * @var string
     * @access protected
     */
    protected $defaultOrderByStatement = '';
    /**
     * Construct the class
     * 
     * @access public
     * @author Johnathan Pulos
     */
    public function __construct($getParams)
    {
        $this->validator = new \Utilities\Validator();
        $this->sanitizer = new \Utilities\Sanitizer();
        $this->providedParams = $this->sanitizer->cleanArrayValues($getParams);
    }
}
