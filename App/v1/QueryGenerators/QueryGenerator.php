<?php
/**
 * This file is part of Joshua Project API.
 * 
 * Joshua Project API is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Joshua Project API is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see 
 * <http://www.gnu.org/licenses/>.
 *
 * @author Johnathan Pulos <johnathan@missionaldigerati.org>
 * @copyright Copyright 2013 Missional Digerati
 * 
 */
namespace QueryGenerators;

/**
 * The parent class for all Query Generators.  This class holds common functionality between all Query Generators.
 *
 * @package default
 * @author Johnathan Pulos
 */
class QueryGenerator
{
    /**
     * The prepared statement generated by the class to be used with PDO
     *
     * @var string
     * @access public
     */
    public $preparedStatement = "";
    /**
     * The variables for the prepared statement
     *
     * @var array
      * @access public
     */
    public $preparedVariables = array();
    /**
     * The Sanitizer class for sanitizing data
     *
     * @var object
     * @access protected
     */
    protected $sanitizer;
    /**
     * The Validator class for checking validations
     *
     * @var object
     * @access protected
     */
    protected $validator;
    /**
     * The provided parameters passed in from the $_GET params
     *
     * @var array
      * @access protected
     */
    protected $providedParams = array();
    /**
     * An array of column names for this database table that we want to select in searches.  Simply remove fields you do not want to expose.
     *
     * @var array
     * @access protected
     */
    protected $fieldsToSelectArray = array();
    /**
     * A string that will hold the fields for the Select statement
     *
     * @var string
     * @access protected
     */
    protected $selectFieldsStatement = '';
    /**
     * The table to pull the data from
     *
     * @var string
     * @access protected
     */
    protected $tableName = '';
    /**
     * A string that will hold the default order by for the Select statement
     *
     * @var string
     * @access protected
     */
    protected $defaultOrderByStatement = '';
    /**
     * The CASE statement for generating the JPScaleText
     *
     * @var string
     * @access protected
     */
    protected $JPScaleTextSelectStatement = "CASE  WHEN JPScale = 1.0 OR JPScale = 2.0 THEN 'Status Unavailable' WHEN JPScale = 1.1 OR JPScale = 1.2 THEN 'Unreached' WHEN JPScale = 2.1 OR JPScale = 2.2 THEN 'Nominal Church' ELSE 'Established Church' END";
    /**
     * The CONCAT statement for generating the JPScaleImageURL
     *
     * @var string
     * @access protected
     */
    protected $JPScaleImageURLSelectStatement = "CONCAT('http://www.joshuaproject.net/images/scale', ROUND(JPScale), '.jpg')";
    /**
     * An array of table columns (key) and their alias (value)
     *
     * @var array
     * @access protected
     **/
    protected $aliasFields = array();
    /**
     * Construct the class
     * 
     * @access public
     * @author Johnathan Pulos
     */
    public function __construct($getParams)
    {
        $this->validator = new \Utilities\Validator();
        $this->sanitizer = new \Utilities\Sanitizer();
        $this->providedParams = $this->sanitizer->cleanArrayValues($getParams);
    }
    /**
     * A shorter method for checking if the array_key_exists
     *
     * @param string $paramName the name of the param your looking for
     * @return void
     * @access protected
     * @author Johnathan Pulos
     */
    protected function paramExists($paramName)
    {
        return array_key_exists($paramName, $this->providedParams);
    }
    /**
     * Set the limit and starting variables based on the given limit and page variables
     *
     * @return void
     * @access protected
     * @author Johnathan Pulos
     */
    protected function addLimitFilter()
    {
        if (($this->paramExists('limit')) && intval($this->providedParams['limit']) > 0) {
            $this->preparedVariables['limit'] = intval($this->providedParams['limit']);
        } else {
            $this->preparedVariables['limit'] = 100;
        }
        if (($this->paramExists('page')) && intval($this->providedParams['page']) > 0) {
            $this->preparedVariables['starting'] = (intval($this->providedParams['page'])*$this->preparedVariables['limit'])-1;
        } else {
            $this->preparedVariables['starting'] = 0;
        }
        $this->preparedStatement .= "LIMIT :starting, :limit";
    }
    /**
     * Generates an IN () statement from a piped string.  It writes the prepared version, and adds the variables to the preparedVariables params.
     * @example 17|23|12 -> IN (17, 23, 12)
     *
     * @param string $str The piped string
     * @param string $columnName the column name that you want to search
     * @return string
     * @access protected
     * @author Johnathan Pulos
     */
    protected function generateInStatementFromPipedString($str, $columnName)
    {
        $preparedInVars = array();
        $i = 0;
        $stringParts = explode("|", $str);
        foreach ($stringParts as $element) {
            $preparedParamName = str_replace(' ', '', strtolower($columnName)) . '_' . $i;
            array_push($preparedInVars, ':' . $preparedParamName);
            $this->preparedVariables[$preparedParamName] = $element;
            $i = $i+1;
        }
        return $columnName . " IN (" . join(", ", $preparedInVars) . ")";
    }
    /**
     * Generates a BETWEEN statement using a dash separated string.  The string should have either a single integer with no dash, or
     * a min and max separated by a dash.  This will throw an error if you supply too many parameters, or if you minimum is greater
     * then your max.
     *
     * @param string $str The dash separated string min-max
     * @param string $columnName the name of the table column to search
     * @param string $suffix a suffix to be appended to the variable name (Please do not separate with spaces)
     * @return string
     * @throws InvalidArgumentException if the param has too many variables, or the min is greater than the max
     * @access protected
     * @author Johnathan Pulos
     */
    protected function generateBetweenStatementFromDashSeperatedString($str, $columnName, $suffix)
    {
        $stringValues = explode('-', $str);
        $stringValuesLength = count($stringValues);
        if ($stringValuesLength == 2) {
            $min = floatval($stringValues[0]);
            $max = floatval($stringValues[1]);
            if ($min >= $max) {
                throw new \InvalidArgumentException("A dashed parameter has a minimum greater than it's maximum.");
            }
            $this->preparedVariables["min_" . $suffix] = $min;
            $this->preparedVariables["max_" . $suffix] = $max;
            return $columnName . " BETWEEN :min_" . $suffix . " AND :max_" . $suffix;
        } else if ($stringValuesLength == 1) {
            $this->preparedVariables["total_" . $suffix] = floatval($stringValues[0]);
            return $columnName . " = :total_" . $suffix;
        } else {
            throw new \InvalidArgumentException("A dashed parameter has too many values.");
        }
    }
    /**
     * Generates the where statement for a boolean.  If the value is Y,  it looks for a value of Y.  If it is N, it looks for
     * a value of NULL.
     *
     * @param string $str The value the user is looking for
     * @param string $columnName the name of the table column to search
     * @param string $suffix a suffix to be appended to the variable name (Please do not separate with spaces)
     * @return string
     * @throws InvalidArgumentException if the param has too many variables, or the min is greater than the max
     * @access protected
     * @author Johnathan Pulos
     */
    protected function generateWhereStatementForBoolean($str, $columnName, $suffix)
    {
        $val = strtoupper($str);
        if ($val == 'Y') {
            $this->preparedVariables[$suffix] = $val;
            return $columnName . " = :" . $suffix;
        } else if ($val == 'N') {
            return "(" . $columnName . " IS NULL OR " . $columnName . " = '')";
        } else {
            throw new \InvalidArgumentException("A boolean was set with the wrong value.");
        }
    }
    /**
     * Generates the where statement for a boolean.  If the value is Y,  it looks for any value.  If it is N, it looks for
     * a value of NULL or empty.
     *
     * @param string $str The value the user is looking for
     * @param string $columnName the name of the table column to search
     * @return string
     * @throws InvalidArgumentException if the param has too many variables, or the min is greater than the max
     * @access protected
     * @author Johnathan Pulos
     */
    protected function generateWhereStatementForBooleanBasedOnIfFieldHasContentOrNot($str, $columnName)
    {
        $val = strtoupper($str);
        if ($val == 'Y') {
            return "(" . $columnName . " IS NOT NULL OR " . $columnName . " != '')";
        } else if ($val == 'N') {
            return "(" . $columnName . " IS NULL OR " . $columnName . " = '')";
        } else {
            throw new \InvalidArgumentException("A boolean was set with the wrong value.");
        }
    }
    /**
     * Takes the aliasFields array and generates the alias select statements (jppeoples AS jp_peoples)
     *
     * @return string
     * @access protected
     * @author Johnathan Pulos
     **/
    protected function generateAliasSelectStatement()
    {
        $statementArray = array();
        foreach ($this->aliasFields as $key => $value) {
            $statementArray[] = $key . " AS " . $value;
        }
        return join(', ', $statementArray);
    }
}
