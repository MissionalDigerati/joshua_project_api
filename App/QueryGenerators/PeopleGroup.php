<?php
/**
 * This file is part of Joshua Project API.
 * 
 * Joshua Project API is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * Joshua Project API is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see 
 * <http://www.gnu.org/licenses/>.
 *
 * @author Johnathan Pulos <johnathan@missionaldigerati.org>
 * @copyright Copyright 2013 Missional Digerati
 * 
 */
namespace QueryGenerators;

/**
 * A class that creates the prepared statement, and sets up the variables for a PDO prepared statement query.
 * These queries specifically work with the PeopleGroup data.
 *
 * @package default
 * @author Johnathan Pulos
 */
class PeopleGroup
{
    /**
     * The prepared statement generated by the class to be used with PDO
     *
     * @var string
     * @access public
     */
    public $preparedStatement = "";
    /**
     * The variables for the prepared statement
     *
     * @var array
      * @access public
     */
    public $preparedVariables = array();
    /**
     * The provided parameters passed in from the $_GET params
     *
     * @var array
      * @access private
     */
    private $providedParams = array();
    /**
     * The table to pull the data from
     *
     * @var string
     * @access private
     */
    private $tableName = "jppeoples";
    /**
     * Construct the class
     *
     * @param array $getParams the params to use for the query.  Each message has required fields, and will throw error
     * if they are missing
     * 
     * @access public
     * @author Johnathan Pulos
     */
    public function __construct($getParams)
    {
        $this->providedParams = $getParams;
        $this->cleanParams();
    }
    /**
     * Get the unreached of the day query statement.  Requires a month and day param in the given params.
     * REQUIRES getParams month & day
     * 
     * @return void
     * @access public
     * @author Johnathan Pulos
     */
    public function dailyUnreached()
    {
        $this->validateProvidedParams(array('month', 'day'));
        if ($this->validateVariableInRange('month', 1, 12) === false) {
            throw new \InvalidArgumentException("The month is out of range.  It should be 1-12.");
        }
        if ($this->validateVariableInRange('day', 1, 31) === false) {
            throw new \InvalidArgumentException("The day is out of range.  It should be 1-31.");
        }
        $month = intval($this->providedParams['month']);
        $day = intval($this->providedParams['day']);
        $this->preparedStatement = "SELECT * FROM jppeoples WHERE LRofTheDayMonth = :month AND LRofTheDayDay = :day LIMIT 1";
        $this->preparedVariables = array('month' => $month, 'day' => $day);
    }
    /**
     * Find the People Group using the id (PeopleID3), and the country (ROG3)
     *
     * @return void
     * @access public
     * @author Johnathan Pulos
     */
    public function findByIdAndCountry()
    {
        $this->validateProvidedParams(array('id', 'country'));
        $id = intval($this->providedParams['id']);
        $country = strtoupper($this->providedParams['country']);
        $this->preparedStatement = "SELECT * FROM jppeoples WHERE PeopleID3 = :id AND ROG3 = :country LIMIT 1";
        $this->preparedVariables = array('id' => $id, 'country' => $country);
    }
    /**
     * Checks if the params were set in the __construct() method of this class on providedParams. If not, then throw an error.
     *
     * @param array $params the keys of the required params
     * @return void
     * @access private
     * @author Johnathan Pulos
     */
    private function validateProvidedParams($params)
    {
        foreach ($params as $key) {
            if (array_key_exists($key, $this->providedParams) === false) {
                throw new \InvalidArgumentException("Missing the required parameter " . $key);
            }
        }
    }
    /**
     * validates a integer is in range
     *
     * @param string $key the key of the $this->providedParams param to test
     * @param integer $start the start of the range
     * @param integer $end the end of the range
     * @return boolean
     * @access public
     * @author Johnathan Pulos
     */
    private function validateVariableInRange($key, $start, $end)
    {
        $var = intval($this->providedParams[$key]);
        return (($var >= $start) && ($var <= $end));
    }
    /**
     * Cleans the parameters passed to $this->providedParams variable.
     *
     * @return void
     * @access private
     * @author Johnathan Pulos
     */
    private function cleanParams()
    {
        $newValue = array();
        foreach ($this->providedParams as $key => $value) {
            $newValue[$key] = strip_tags($value);
        }
        $this->providedParams = $newValue;
    }
}
